name: CI/CD Workflow

on:
  push:
    branches:
      - main

jobs:
  lint:
    name: Check Code Style with flake8
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8==7.1.1 flake8-isort==6.1.1

      - name: Run linters
        run: python -m flake8 --extend-exclude .venv,migrations backend

  build_and_push:
    name: Build and Push Images to Docker Hub
    needs: lint
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: wurt83ow
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: wurt83ow/kittygram_backend:latest

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: wurt83ow/kittygram_frontend:latest

      - name: Build and push gateway image
        uses: docker/build-push-action@v4
        with:
          context: ./nginx
          push: true
          tags: wurt83ow/kittygram_gateway:latest

  deploy:
    name: Deploy to Production
    needs: build_and_push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Copy docker-compose.production.yml via SSH
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_KEY_PASSPHRASE }}
          source: "docker-compose.production.yml"
          target: "~/kittygram/"

      - name: Executing remote SSH commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_KEY_PASSPHRASE }}
          script: |
            cd ~/kittygram/
            sudo docker compose -f docker-compose.production.yml pull
            sudo docker compose -f docker-compose.production.yml down
            sudo docker compose -f docker-compose.production.yml up -d

  run_tests:
    name: Run Tests After Deploy
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest

      - name: Run all tests
        run: |
          pytest tests/ --maxfail=5 --disable-warnings

  send_message:
    name: Send Telegram Notification
    needs: run_tests
    runs-on: ubuntu-latest

    steps:
      - name: Send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            üéâ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω!
            üîó [–ö–æ–º–º–∏—Ç]({{ github.event.head_commit.url }})
            üßë –ê–≤—Ç–æ—Ä: ${{ github.actor }}
            üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${{ github.event.head_commit.message }}